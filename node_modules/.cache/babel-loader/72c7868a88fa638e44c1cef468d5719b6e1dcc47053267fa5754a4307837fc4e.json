{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motta\\\\cardboard\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = async (username, password) => {\n    // In a real app, you would make an API call here\n    if (username === 'admin' && password === 'password') {\n      const token = 'fake-jwt-token';\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n  };\n  const value = {\n    isAuthenticated,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","login","username","password","setItem","Error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Motta/cardboard/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n    }\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    // In a real app, you would make an API call here\r\n    if (username === 'admin' && password === 'password') {\r\n      const token = 'fake-jwt-token';\r\n      localStorage.setItem('token', token);\r\n      setIsAuthenticated(true);\r\n    } else {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const value = { isAuthenticated, login, logout };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9E,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7DE,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAK,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAK;IAC1D;IACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnD,MAAML,KAAK,GAAG,gBAAgB;MAC9BC,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;MACpCD,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAM;MACL,MAAM,IAAIQ,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCV,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMW,KAAK,GAAG;IAAEZ,eAAe;IAAEK,KAAK;IAAEK;EAAO,CAAC;EAEhD,oBACEhB,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAd,QAAA,EAChCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClB,EAAA,CAjCWF,YAAmD;AAAAqB,EAAA,GAAnDrB,YAAmD;AAmChE,OAAO,MAAMsB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG9B,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI0B,OAAO,KAAKzB,SAAS,EAAE;IACzB,MAAM,IAAIa,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOY,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAexB,WAAW;AAAC,IAAAuB,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}