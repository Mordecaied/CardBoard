{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motta\\\\cardboard\\\\src\\\\components\\\\dashboard\\\\FeaturesProgress.tsx\";\nimport React from 'react';\nimport { Card, CardContent, Typography } from '@mui/material';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FeaturesProgress = ({\n  features\n}) => {\n  const isFeatureArray = arr => {\n    return arr.length > 0 && typeof arr[0] !== 'string';\n  };\n  const getData = () => {\n    if (isFeatureArray(features)) {\n      return features.flatMap(feature => Object.entries(feature.progress).map(([key, value]) => ({\n        name: key,\n        [feature.name]: value\n      })));\n    } else {\n      // If features is a string array, create dummy data\n      return features.map(feature => ({\n        name: feature,\n        progress: Math.floor(Math.random() * 100) // Replace with actual progress data when available\n      }));\n    }\n  };\n  const data = getData();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Progress by Features\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: data,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), isFeatureArray(features) ? features.map((feature, index) => /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: feature.name,\n            fill: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n          }, feature.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"progress\",\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_c = FeaturesProgress;\nexport default FeaturesProgress;\nvar _c;\n$RefreshReg$(_c, \"FeaturesProgress\");","map":{"version":3,"names":["React","Card","CardContent","Typography","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","FeaturesProgress","features","isFeatureArray","arr","length","getData","flatMap","feature","Object","entries","progress","map","key","value","name","Math","floor","random","data","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","index","fill","toString","_c","$RefreshReg$"],"sources":["C:/Users/Motta/cardboard/src/components/dashboard/FeaturesProgress.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@mui/material';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { Feature } from '../../types';\r\n\r\ninterface FeaturesProgressProps {\r\n  features: Feature[] | string[];\r\n}\r\n\r\nexport const FeaturesProgress: React.FC<FeaturesProgressProps> = ({ features }) => {\r\n  const isFeatureArray = (arr: Feature[] | string[]): arr is Feature[] => {\r\n    return arr.length > 0 && typeof arr[0] !== 'string';\r\n  };\r\n\r\n  const getData = () => {\r\n    if (isFeatureArray(features)) {\r\n      return features.flatMap(feature => \r\n        Object.entries(feature.progress).map(([key, value]) => ({\r\n          name: key,\r\n          [feature.name]: value,\r\n        }))\r\n      );\r\n    } else {\r\n      // If features is a string array, create dummy data\r\n      return features.map(feature => ({\r\n        name: feature,\r\n        progress: Math.floor(Math.random() * 100), // Replace with actual progress data when available\r\n      }));\r\n    }\r\n  };\r\n\r\n  const data = getData();\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>Progress by Features</Typography>\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <BarChart\r\n            data={data}\r\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            {isFeatureArray(features) \r\n              ? features.map((feature, index) => (\r\n                  <Bar key={feature.name} dataKey={feature.name} fill={`#${Math.floor(Math.random()*16777215).toString(16)}`} />\r\n                ))\r\n              : <Bar dataKey=\"progress\" fill=\"#8884d8\" />\r\n            }\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FeaturesProgress;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}