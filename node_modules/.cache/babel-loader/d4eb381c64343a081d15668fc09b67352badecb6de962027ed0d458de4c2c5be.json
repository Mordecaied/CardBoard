{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { releaseData, releases } from '../data/MockData';\nexport const useReleaseData = () => {\n  _s();\n  const [selectedRelease, setSelectedRelease] = useState(releases[0]);\n  const [data, setData] = useState(releaseData[selectedRelease]);\n  const fetchData = useCallback(async releaseId => {\n    // Simulate an API call with a delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (releaseData[releaseId]) {\n      setData(releaseData[releaseId]);\n    } else {\n      throw new Error('Release data not found');\n    }\n  }, []);\n  const updateDate = useCallback(updatedMilestone => {\n    setData(prevData => ({\n      ...prevData,\n      milestones: prevData.milestones.map(milestone => milestone.id === updatedMilestone.id ? updatedMilestone : milestone)\n    }));\n  }, []);\n\n  // Update data when selectedRelease changes\n  useEffect(() => {\n    fetchData(selectedRelease);\n  }, [selectedRelease, fetchData]);\n  return {\n    selectedRelease,\n    setSelectedRelease,\n    data,\n    updateDate,\n    fetchData\n  };\n};\n_s(useReleaseData, \"n9v6WuyIfw2PH9MbTUWqYi1BGvY=\");","map":{"version":3,"names":["useState","useEffect","useCallback","releaseData","releases","useReleaseData","_s","selectedRelease","setSelectedRelease","data","setData","fetchData","releaseId","Promise","resolve","setTimeout","Error","updateDate","updatedMilestone","prevData","milestones","map","milestone","id"],"sources":["C:/Users/Motta/cardboard/src/hooks/useReleaseData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { releaseData, releases } from '../data/MockData';\r\nimport { ReleaseData, Milestone } from '../types';\r\n\r\nexport const useReleaseData = () => {\r\n  const [selectedRelease, setSelectedRelease] = useState<string>(releases[0]);\r\n  const [data, setData] = useState<ReleaseData>(releaseData[selectedRelease]);\r\n\r\n  const fetchData = useCallback(async (releaseId: string) => {\r\n    // Simulate an API call with a delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    if (releaseData[releaseId]) {\r\n      setData(releaseData[releaseId]);\r\n    } else {\r\n      throw new Error('Release data not found');\r\n    }\r\n  }, []);\r\n\r\n  const updateDate = useCallback((updatedMilestone: Milestone) => {\r\n    setData(prevData => ({\r\n      ...prevData,\r\n      milestones: prevData.milestones.map(milestone =>\r\n        milestone.id === updatedMilestone.id ? updatedMilestone : milestone\r\n      )\r\n    }));\r\n  }, []);\r\n\r\n  // Update data when selectedRelease changes\r\n  useEffect(() => {\r\n    fetchData(selectedRelease);\r\n  }, [selectedRelease, fetchData]);\r\n\r\n  return { selectedRelease, setSelectedRelease, data, updateDate, fetchData };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AAGxD,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAASI,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC3E,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAcG,WAAW,CAACI,eAAe,CAAC,CAAC;EAE3E,MAAMI,SAAS,GAAGT,WAAW,CAAC,MAAOU,SAAiB,IAAK;IACzD;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,IAAIX,WAAW,CAACS,SAAS,CAAC,EAAE;MAC1BF,OAAO,CAACP,WAAW,CAACS,SAAS,CAAC,CAAC;IACjC,CAAC,MAAM;MACL,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAGf,WAAW,CAAEgB,gBAA2B,IAAK;IAC9DR,OAAO,CAACS,QAAQ,KAAK;MACnB,GAAGA,QAAQ;MACXC,UAAU,EAAED,QAAQ,CAACC,UAAU,CAACC,GAAG,CAACC,SAAS,IAC3CA,SAAS,CAACC,EAAE,KAAKL,gBAAgB,CAACK,EAAE,GAAGL,gBAAgB,GAAGI,SAC5D;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArB,SAAS,CAAC,MAAM;IACdU,SAAS,CAACJ,eAAe,CAAC;EAC5B,CAAC,EAAE,CAACA,eAAe,EAAEI,SAAS,CAAC,CAAC;EAEhC,OAAO;IAAEJ,eAAe;IAAEC,kBAAkB;IAAEC,IAAI;IAAEQ,UAAU;IAAEN;EAAU,CAAC;AAC7E,CAAC;AAACL,EAAA,CA9BWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}